<?php

/**
 * @file
 * Functions to support theming in the rain_theme theme.
 */

use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\media\MediaInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_preprocesS_menu_ID().
 */
function nysenate_theme_preprocess_menu__socials(&$variables) {
  $socials = [];
  foreach ($variables['items'] as $link) {
    $socials[] = [
      'icon' => $link['title'],
      'url' => $link['url']->toString(),
    ];
  }
  $variables['socials'] = $socials;
}

/**
 * Implements hook_preprocess_block_ID().
 */
function nysenate_theme_preprocess_block__system_branding_block(&$variables) {
  $variables['site_branding'] = [
    'text' => $variables['site_name'],
    'img' => [
      'url' => 'https://www.nysenate.gov/sites/all/themes/nysenate/images/nys_logo224x224.png',
      'alt' => 'New York State Senate Seal',
    ],
    'link' => Url::fromRoute('<front>'),
  ];
}

/**
 * Implements hook_preprocess_block_ID().
 */
function nysenate_theme_preprocess_block__twitterblock(&$variables) {
  $args = [
    '@username' => $variables['configuration']['username'],
  ];

  // Follow link.
  $variables['content']['follow_link'] = [
    '#type' => 'link',
    '#title' => t('Follow'),
    '#url' => Url::fromUri(strtr('https://twitter.com/intent/follow?screen_name=@username', $args)),
  ];

  // Account link.
  $variables['content']['account_link'] = [
    '#type' => 'link',
    '#title' => strtr('@@username', $args),
    '#url' => Url::fromUri(strtr('https://twitter.com/@username', $args)),
  ];

  // Profile image.
  $variables['content']['profile_image'] = [
    '#markup' => strtr('<img src="https://unavatar.io/twitter/@username" width="100" height"100" />', $args),
  ];
}

/**
 * Implements hook_preprocess_node_TYPE().
 */
function nysenate_theme_preprocess_node__article(&$variables) {
  $issues = [];

  $variables['title'] = $variables['label'][0]['#context']['value'];
  $variables['field_date'] = $variables['content']['field_date'][0]['#markup'];
  foreach ($variables['content']['field_issues'] as $key => $field_issues) {
    if (!is_numeric($key)) {
      continue;
    }
    $url = Link::fromTextAndUrl($field_issues['#title'], $field_issues['#url']);
    $issues[] = $url;
  }
  $variables['field_issues'] = $issues;
}

/**
 * Implements hook_preproces_block_content_ID().
 */
function nysenate_theme_preprocess_block_content__honoree_profile_block(&$variables) {
  $variables['title'] = $variables['elements']['#block_content']->label();
  if (!empty($variables['content']['field_link'][0])) {
    $variables['cta'] = [
      'text' => $variables['content']['field_link'][0]['#title'],
      'url' => $variables['content']['field_link'][0]['#url']->toString(),
    ];
  }
}

/**
 * Implements hook_preprocess_block_content_ID().
 */
function nysenate_theme_preprocess_block_content__quick_facts(&$variables) {
  $facts = [];
  $current_year = date('Y');
  if ($current_year % 2 == 0) {
    $session_year = $current_year - 1;
    $first_year   = $session_year;
    $second_year  = substr($current_year, -2);
  }
  else {
    $session_year = $current_year;
    $first_year   = $current_year;
    $second_year  = substr($current_year + 1, -2);
  }

  foreach ($variables['content']['field_quick_facts'] as $key => $items) {
    if (!is_numeric($key)) {
      continue;
    }

    $description = '';
    $statistic = '';

    if ($items['#paragraph']->field_pg_quick_facts_label->getValue()) {
      $description = $items['#paragraph']->field_pg_quick_facts_label->getValue();
      $description = reset($description)['value'];
    }

    if ($items['#paragraph']->field_pg_quick_facts_no->getValue()) {
      $statistic = $items['#paragraph']->field_pg_quick_facts_no->getValue();
      $statistic = reset($statistic)['value'];
    }

    $facts[] = [
      'description' => $description,
      'statistic' => $statistic,
    ];
  }

  // Set static status for the facts.
  $facts[0]['status'] = 'signed';
  $facts[1]['status'] = 'waiting';
  $facts[2]['status'] = 'vetoed';

  $bill_status = '';
  foreach ($facts as $key => $fact) {
    switch ($fact['status']) {
      case 'signed':
        $bill_status = 'SIGNED_BY_GOV';
        break;

      case 'waiting':
        $bill_status = 'DELIVERED_TO_GOV';
        break;

      case 'vetoed':
        $bill_status = 'VETOED';
        break;

      default:
        break;
    }

    // Arrange array for url params.
    $params = [
      'searched' => 'true',
      'type' => 'f_bill',
      'bill_session_year' => $session_year,
      'bill_status' => $bill_status,
      'page' => 1,
    ];
    $link = Url::fromUserInput('/search/legislation', ['query' => $params])->toString();
    $facts[$key]['link'] = $link;
  }

  $variables['facts'] = $facts;

  $year = $first_year . '-' . $second_year;
  $title = $year . ', ' . $variables['elements']['#block_content']->info->getValue()[0]['value'];
  $variables['title'] = $title;
}

/**
 * Implements hook_preprocess_block_ID().
 */
function nysenate_theme_preprocess_block__views_block__homepage_hero_homepage_hero(&$variables) {
  $result = $variables["content"]["#view"]->result;
  foreach ($result as $node) {
    if ($node->_entity->bundle() == 'session' && $node->_entity instanceof NodeInterface) {
      $date = new DateTime($node->_entity->field_date->value);

      if (!$node->_entity->field_session_calendars->isEmpty() && $node->_entity->field_session_calendars->entity instanceof NodeInterface) {
        $url_calendar = $node->_entity->field_session_calendars->entity->toUrl()->toString();
      }

      if (!$node->_entity->field_ustream_url->isEmpty() && $node->_entity->field_ustream_url->entity instanceof MediaInterface) {
        $media = $node->_entity->field_ustream_url->entity->field_media_oembed_ustream ?? [];
      }

      $variables['homepage_hero'] = [
        'date' => $date->format('F d, Y'),
        'url_calendar' => $url_calendar ?? '#',
        'media' => $media ?? [],
      ];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function nysenate_theme_preprocess_node__resolution(&$variables) {
  $variables['label'] = $variables['label'][0]['#context']['value'] ?? '';
  $variables['ol_name'] = isset($variables['elements']['field_ol_name'][0]) ? $variables['elements']['field_ol_name'][0]['#context']['value'] : '';
  $variables['featured_quote'] = isset($variables['elements']['field_featured_quote'][0]) ? $variables['elements']['field_featured_quote'][0]['#context']['value'] : '';
  $variables['ol_law_section'] = isset($variables['elements']['field_ol_law_section'][0]) ? $variables['elements']['field_ol_law_section'][0]['#context']['value'] : '';
}

/**
 * Implements hook_preprocess_node__NODE_TYPE().
 */
function nysenate_theme_preprocess_node__event(&$variables) {
  $start_date = strtotime($variables['content']['field_date_range'][0]['start_date']['#text']);
  $end_date = strtotime($variables['content']['field_date_range'][0]['end_date']['#text']);
  $issues = [];

  // Set up reference variables indicating if this event spans multiple days.
  $is_multiday = !(date('Ymd', $start_date) == date('Ymd', $end_date));

  $variables['is_multiday'] = $is_multiday;
  $variables['start_date'] = $start_date;
  $variables['end_date'] = $end_date;

  $street = $variables['content']['field_location'][0]['address_line1']['#value'];
  $city = $variables['content']['field_location'][0]['locality']['#value'];
  $administrative_area = $variables['content']['field_location'][0]['administrative_area']['#value'];
  $postal_code = $variables['content']['field_location'][0]['postal_code']['#value'];

  $variables['location_url'] = urlencode($street . ' ' . $city . ', ' . $administrative_area . ', ' . $postal_code);

  foreach ($variables['content']['field_issues'] as $key => $field_issues) {
    if (!is_numeric($key)) {
      continue;
    }
    $url = Link::fromTextAndUrl($field_issues['#title'], $field_issues['#url']);
    $issues[] = $url;
  }
  $variables['field_issues'] = $issues;
}
