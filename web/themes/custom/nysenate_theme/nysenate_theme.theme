<?php

/**
 * @file
 * Functions to support theming in the rain_theme theme.
 */

use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\media\MediaInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_preprocesS_menu_ID().
 */
function nysenate_theme_preprocess_menu__socials(&$variables) {
  $socials = [];
  foreach ($variables['items'] as $link) {
    $socials[] = [
      'icon' => $link['title'],
      'url' => $link['url']->toString(),
    ];
  }
  $variables['socials'] = $socials;
}

/**
 * Implements hook_preprocess_block_ID().
 */
function nysenate_theme_preprocess_block__system_branding_block(&$variables) {
  $variables['site_branding'] = [
    'text' => $variables['site_name'],
    'img' => [
      'url' => 'https://www.nysenate.gov/sites/all/themes/nysenate/images/nys_logo224x224.png',
      'alt' => 'New York State Senate Seal',
    ],
    'link' => Url::fromRoute('<front>'),
  ];
}

/**
 * Implements hook_preprocess_block_ID().
 */
function nysenate_theme_preprocess_block__twitterblock(&$variables) {
  $args = [
    '@username' => $variables['configuration']['username'],
  ];

  // Follow link.
  $variables['content']['follow_link'] = [
    '#type' => 'link',
    '#title' => t('Follow'),
    '#url' => Url::fromUri(strtr('https://twitter.com/intent/follow?screen_name=@username', $args)),
  ];

  // Account link.
  $variables['content']['account_link'] = [
    '#type' => 'link',
    '#title' => strtr('@@username', $args),
    '#url' => Url::fromUri(strtr('https://twitter.com/@username', $args)),
  ];

  // Profile image.
  $variables['content']['profile_image'] = [
    '#markup' => strtr('<img src="https://unavatar.io/twitter/@username" width="100" height"100" />', $args),
  ];
}

/**
 * Implements hook_preprocess_node_TYPE().
 */
function nysenate_theme_preprocess_node__article(&$variables) {
  $issues = [];

  $variables['title'] = $variables['label'][0]['#context']['value'];
  $variables['field_date'] = $variables['content']['field_date'][0]['#markup'];
  foreach ($variables['content']['field_issues'] as $key => $field_issues) {
    if (!is_numeric($key)) {
      continue;
    }
    $url = Link::fromTextAndUrl($field_issues['#title'], $field_issues['#url']);
    $issues[] = $url;
  }
  $variables['field_issues'] = $issues;
}

/**
 * Implements hook_preproces_block_content_ID().
 */
function nysenate_theme_preprocess_block_content__honoree_profile_block(&$variables) {
  $variables['title'] = $variables['elements']['#block_content']->label();
  if (!empty($variables['content']['field_link'][0])) {
    $variables['cta'] = [
      'text' => $variables['content']['field_link'][0]['#title'],
      'url' => $variables['content']['field_link'][0]['#url']->toString(),
    ];
  }
}

/**
 * Implements hook_preprocess_block_content_ID().
 */
function nysenate_theme_preprocess_block_content__quick_facts(&$variables) {
  $facts = [];
  $current_year = date('Y');
  if ($current_year % 2 == 0) {
    $session_year = $current_year - 1;
    $first_year   = $session_year;
    $second_year  = substr($current_year, -2);
  }
  else {
    $session_year = $current_year;
    $first_year   = $current_year;
    $second_year  = substr($current_year + 1, -2);
  }

  foreach ($variables['content']['field_quick_facts'] as $key => $items) {
    if (!is_numeric($key)) {
      continue;
    }

    $description = '';
    $statistic = '';

    if ($items['#paragraph']->field_pg_quick_facts_label->getValue()) {
      $description = $items['#paragraph']->field_pg_quick_facts_label->getValue();
      $description = reset($description)['value'];
    }

    if ($items['#paragraph']->field_pg_quick_facts_no->getValue()) {
      $statistic = $items['#paragraph']->field_pg_quick_facts_no->getValue();
      $statistic = reset($statistic)['value'];
    }

    $facts[] = [
      'description' => $description,
      'statistic' => $statistic,
    ];
  }

  // Set static status for the facts.
  $facts[0]['status'] = 'signed';
  $facts[1]['status'] = 'waiting';
  $facts[2]['status'] = 'vetoed';

  $bill_status = '';
  foreach ($facts as $key => $fact) {
    switch ($fact['status']) {
      case 'signed':
        $bill_status = 'SIGNED_BY_GOV';
        break;

      case 'waiting':
        $bill_status = 'DELIVERED_TO_GOV';
        break;

      case 'vetoed':
        $bill_status = 'VETOED';
        break;

      default:
        break;
    }

    // Arrange array for url params.
    $params = [
      'searched' => 'true',
      'type' => 'f_bill',
      'bill_session_year' => $session_year,
      'bill_status' => $bill_status,
      'page' => 1,
    ];
    $link = Url::fromUserInput('/search/legislation', ['query' => $params])->toString();
    $facts[$key]['link'] = $link;
  }

  $variables['facts'] = $facts;

  $year = $first_year . '-' . $second_year;
  $title = $year . ', ' . $variables['elements']['#block_content']->info->getValue()[0]['value'];
  $variables['title'] = $title;
}

/**
 * Implements hook_preprocess_block_content_ID().
 */
function nysenate_theme_preprocess_block_content__featured_bill(&$variables) {
  if (isset($variables['content']['field_bills']) && !empty($variables['content']['field_bills'])) {
    $bills = [];
    foreach ($variables['content']['field_bills'] as $key => $bill) {
      if (!is_numeric($key)) {
        continue;
      }

      // Set default values.
      $comm_sen = FALSE;
      $floor_sen = FALSE;
      $passed_sen = FALSE;
      $comm_assembly = FALSE;
      $floor_assembly = FALSE;
      $passed_assembly = FALSE;
      $delivered_to_gov = FALSE;
      $signed_by_gov = FALSE;

      // Published date.
      $date = \Drupal::service('date.formatter')->format(strtotime($bill['#node']->field_ol_publish_date->value), '', 'F d, Y');

      // Last status.
      $last_status_values = $bill['#node']->field_ol_last_status->getSetting('allowed_values');
      $last_status = $last_status_values[$bill['#node']->field_ol_last_status->value];

      // All status.
      $all_statuses = $bill['#node']->field_ol_all_statuses->value;
      $all_statuses = json_decode($all_statuses);
      foreach ($all_statuses->items as $key => $value) {
        switch ($value->statusType) {
          case 'IN_SENATE_COMM':
            $comm_sen = TRUE;
            break;

          case 'SENATE_FLOOR':
            $floor_sen = TRUE;
            break;

          case 'PASSED_SENATE':
            $passed_sen = TRUE;
            break;

          case 'IN_ASSEMBLY_COMM':
            $comm_assembly = TRUE;
            break;

          case 'ASSEMBLY_FLOOR':
            $floor_assembly = TRUE;
            break;

          case 'PASSED_ASSEMBLY':
            $passed_assembly = TRUE;
            break;

          case 'DELIVERED_TO_GOV':
            $delivered_to_gov = TRUE;
            break;

          case 'SIGNED_BY_GOV':
            $signed_by_gov = TRUE;
            break;

          default:
            break;
        }
      }

      // Arrange the positions value.
      $positions = [
        [
          'text' => t('Introduced'),
          'is_passed' => TRUE,
        ],
        [
          'text' => t('In Committee'),
          'is_passed' => ($comm_sen && $comm_assembly),
        ],
        [
          'text' => t('On Floor Calendar'),
          'is_passed' => ($floor_sen && $floor_assembly),
        ],
        [
          'is_grouped' => TRUE,
          'items' => [
            [
              'text' => t('Passed Senate'),
              'is_passed' => $passed_sen,
            ],
            [
              'text' => t('Passed Assembly'),
              'is_passed' => $passed_assembly,
            ],
          ],
        ],
        [
          'text' => t('Delivered to Governor'),
          'is_passed' => $delivered_to_gov,
        ],
        [
          'text' => t('Signed by Governor'),
          'is_passed' => $signed_by_gov,
        ],
      ];

      $sponsor = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->load($bill['#node']->field_ol_sponsor->target_id);

      $sponsor_name = $sponsor->field_senator_name->given . ' ' . $sponsor->field_senator_name->family;

      $bills[] = [
        'number' => $bill['#node']->label(),
        'description' => $bill['#node']->field_ol_name->value,
        'date' => $date,
        'update_location' => $last_status,
        'sponsor' => $sponsor_name,
        'positions' => $positions,
      ];

      $variables['bills'] = $bills;
    }
  }
}

/**
 * Implements hook_preprocess_block_ID().
 */
function nysenate_theme_preprocess_block__views_block__homepage_hero_homepage_hero(&$variables) {
  $result = $variables["content"]["#view"]->result;
  foreach ($result as $node) {
    if ($node->_entity->bundle() == 'session' && $node->_entity instanceof NodeInterface) {
      $date = new DateTime($node->_entity->field_date->value);

      if (!$node->_entity->field_session_calendars->isEmpty() && $node->_entity->field_session_calendars->entity instanceof NodeInterface) {
        $url_calendar = $node->_entity->field_session_calendars->entity->toUrl()->toString();
      }

      if (!$node->_entity->field_ustream_url->isEmpty() && $node->_entity->field_ustream_url->entity instanceof MediaInterface) {
        $media = $node->_entity->field_ustream_url->entity->field_media_oembed_ustream ?? [];
      }

      $variables['homepage_hero'] = [
        'date' => $date->format('F d, Y'),
        'url_calendar' => $url_calendar ?? '#',
        'media' => $media ?? [],
      ];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function nysenate_theme_preprocess_node__resolution(&$variables) {
  $variables['label'] = $variables['label'][0]['#context']['value'] ?? '';
  $variables['ol_name'] = isset($variables['elements']['field_ol_name'][0]) ? $variables['elements']['field_ol_name'][0]['#context']['value'] : '';
  $variables['featured_quote'] = isset($variables['elements']['field_featured_quote'][0]) ? $variables['elements']['field_featured_quote'][0]['#context']['value'] : '';
  $variables['ol_law_section'] = isset($variables['elements']['field_ol_law_section'][0]) ? $variables['elements']['field_ol_law_section'][0]['#context']['value'] : '';
}
