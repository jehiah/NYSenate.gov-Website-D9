<?php

/**
 * @file
 * Custom functionality for the nys_dashboard module.
 */

use Drupal\views\Views;

/**
 * Implements hook_views_query_alter().
 */
function nys_dashboard_views_query_alter($view, $query) {
  if ($view->id() == 'constituent_petitions_and_questionnaires' && $view->current_display == 'constituent_questionnaires_submitted') {
    if (\Drupal::currentUser()->id()) {
      $unique_node_ids = [];
      $result = \Drupal::database()
        ->select('webform_submission', 'w')
        ->fields('w', ['entity_id'])
        ->condition('uid', \Drupal::currentUser()->id())
        ->condition('entity_type', 'node')
        ->orderBy('sid', 'DESC')
        ->execute()
        ->fetchAll();

      foreach ($result as $res) {
        if (!in_array($res->entity_id, $unique_node_ids)) {
          $unique_node_ids[] = $res->entity_id;
        }
      }

      if (!empty($unique_node_ids)) {
        $query->where[1]['conditions'][2]['value'] = $unique_node_ids;
        $query->where[1]['conditions'][2]['operator'] = 'IN';
      }
    }
  }

  if ($view->id() == 'private_message_inbox') {
    foreach ($query->where as $key => $where) {
      // Join private_message__field_subject table.
      if (!empty($where['conditions'])) {
        foreach ($where['conditions'] as $c_key => $condition) {
          if ($condition['field'] == 'private_messages.message__value') {
            $configuration = [
              'type' => 'left',
              'table' => 'private_message__field_subject',
              'field' => 'entity_id',
              'left_table' => 'private_messages',
              'left_field' => 'id',
            ];
            $join = Views::pluginManager('join')->createInstance('standard', $configuration);
            $query->addRelationship('private_message__field_subject', $join, 'private_messages');

            // Search Subject value as well.
            $query->addWhere(
              $key,
              'private_message__field_subject.field_subject_value',
              $condition['value'],
              $condition['operator']
            );
            $query->where[$key]['type'] = 'OR';
          }
          elseif ($condition['field'] == 'private_messages.owner') {
            // Search Owner's Name.
            $user_ids = [];
            $users = \Drupal::database()->query(
              "SELECT u.uid FROM users u
                 LEFT JOIN users_field_data ufd ON ufd.uid = u.uid
                 LEFT JOIN user__field_first_name f ON f.entity_id = u.uid AND f.bundle = 'user'
                 LEFT JOIN user__field_last_name l ON l.entity_id = u.uid AND l.bundle = 'user'
                WHERE ufd.name LIKE '%" . $condition['value'] . "%'
                  OR f.field_first_name_value LIKE '%" . $condition['value'] . "%'
                  OR l.field_last_name_value LIKE '%" . $condition['value'] . "%'"
            );
            $result = $users->fetchAll();

            foreach ($result as $res) {
              if (!in_array($res->uid, $user_ids)) {
                $user_ids[] = $res->uid;
              }
            }

            if (!empty($user_ids)) {
              $query->where[$key]['conditions'][$c_key]['value'] = $user_ids;
              $query->where[$key]['conditions'][$c_key]['operator'] = 'IN';
            }
          }
          elseif ($condition['field'] == 'node_field_data_private_message__field_bill.title') {
            // Search Bill Title.
            $bill_ids = [];
            $bills = \Drupal::database()->query(
              "SELECT n.nid FROM node_field_data n
                WHERE n.title LIKE '%" . $condition['value'] . "%'"
            );
            $result = $bills->fetchAll();

            foreach ($result as $res) {
              if (!in_array($res->nid, $bill_ids)) {
                $bill_ids[] = $res->nid;
              }
            }

            // Add an empty string is there are no bill_ids.
            $bill_ids = $bill_ids == [] ? [''] : $bill_ids;

            $query->where[$key]['conditions'][$c_key]['field'] = 'private_message__field_bill.field_bill_target_id';
            $query->where[$key]['conditions'][$c_key]['value'] = $bill_ids;
            $query->where[$key]['conditions'][$c_key]['operator'] = 'IN';
          }
        }
      }
    }
  }

  if ($view->id() == 'events') {
    $calendar_filter = FALSE;
    foreach ($query->where as $key => $where) {
      $conditions = $where['conditions'];
      $calendar_index = 0;
      foreach ($conditions as $index => $condition) {
        // Modify the date filters according to the view block.
        if (strpos($condition['field'], 'node__field_date_range.field_date_range_value') > 0) {
          $calendar_filter = TRUE;
          $calendar_index = $index;
          if (($view->current_display == 'day_block') || ($view->current_display == 'week_block')) {
            $query->where[$key]['conditions'][$index]['field'] = str_replace('%Y-%m', '%Y-%m-%d', $condition['field']);
          }
        }
      }

      // Add date format for exposed filters on calendar view.
      if ($view->current_display == 'day_block') {
        if (!$calendar_filter) {
          $query->where[$key]['conditions'][] = [
            'field' => 'DATE_FORMAT(node__field_date_range.field_date_range_value, \'%Y-%m-%d\') = :field_date_range_value',
            'value' => [
              ':field_date_range_value' => date('Y-m-d', time()),
            ],
            'operator' => 'formula',
          ];
        }
      }

      // TO DO: month_block and week_block.
    }
  }
}
