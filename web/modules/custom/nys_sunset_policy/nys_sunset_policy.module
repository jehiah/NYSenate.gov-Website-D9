<?php

/**
 * @file
 * Contains custom code for sunset policy.
 */

use Drupal\node\NodeInterface;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;

/**
 * Implements hook_theme().
 */
function nys_sunset_policy_theme() {
  return [
    'expiring_mail' => [
      'variables' => [
        'message' => FALSE,
      ],
    ],
    'expired_mail' => [
      'variables' => [
        'message' => FALSE,
      ],
    ],
  ];
}

/**
 * Implements hook_cron().
 */
function nys_sunset_policy_cron() {
  try {
    /** @var \Drupal\Core\Queue\QueueFactory $queue_factory */
    $queue_factory = \Drupal::service('queue');
    /** @var \Drupal\Core\Queue\QueueInterface $queue */
    $expiring_queue = $queue_factory->get('nys_sunset_expiring_queue');
    // $expiring_nids = nys_sunset_policy_get_expiring();
    if (!empty($expiring_nids)) {
      foreach ($expiring_nids as $nid) {
        $expiring_queue->createItem($nid);
      }
    }
  }
  catch (\Throwable $e) {
    \Drupal::logger('nys_sunset_policy')
      ->error('Sunset policy expiring queue not created.', ['message' => $e->getMessage()]);
  }
  try {
    /** @var \Drupal\Core\Queue\QueueInterface $queue */
    $expired_queue = $queue_factory->get('nys_sunset_expired_queue');
    $expired_nids = nys_sunset_policy_get_expired();
    if (!empty($expired_nids)) {
      foreach ($expired_nids as $nid) {
        $item = new \stdClass();
        $item->nid = $nid;
        $expired_queue->createItem($item);
      }
    }
  }
  catch (\Throwable $e) {
    \Drupal::logger('nys_sunset_policy')
      ->error('Sunset policy expired queue not created.', ['message' => $e->getMessage()]);
  }
}

/**
 * Petition and questionnaire node ids that have expired and need processing.
 *
 * @return array
 *   An array of nids.
 */
function nys_sunset_policy_get_expired() {
  $date = new DrupalDateTime();
  $date->setTimezone(new \DateTimeZone(DateTimeItemInterface::STORAGE_TIMEZONE));
  $date = $date->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT);
  $query = \Drupal::entityTypeManager()->getStorage('node')->getQuery();
  $results = $query
    ->condition('type', ['petition', 'questionnaire'], 'IN')
    ->condition('status', NodeInterface::PUBLISHED)
    ->condition('field_expiration_date', $date, '<=')
    ->execute();
  $node_ids = [];
  if (!empty($results)) {
    foreach ($results as $nid) {
      /** @var \Drupal\node\Entity\NodeInterface */
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
      if ($node->field_last_notified->getValue() < $node->field_expiration_date->getValue()) {
        $node_ids[] = $nid;
      }
    }
  }
  return $node_ids;
}

/**
 * Petition and questionnaire node ids that have expired and need processing.
 *
 * @return array
 *   An array of nids.
 */
function nys_sunset_policy_get_expiring() {
  $date = new DrupalDateTime();
  $date->setTimezone(new \DateTimeZone(DateTimeItemInterface::STORAGE_TIMEZONE));
  $date = $date->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT);
  $future = date('Y-m-d', strtotime('+2 days', $date));
  $query = \Drupal::entityTypeManager()->getStorage('node')->getQuery();
  $results = $query
    ->condition('type', ['petition', 'questionnaire'], 'IN')
    ->condition('status', NodeInterface::PUBLISHED)
    ->condition('field_expiration_date', $date, '>=')
    ->condition('field_expiration_date', $future, '<=')
    ->execute();
  $node_ids = [];
  if (!empty($results)) {
    foreach ($results as $nid) {
      /** @var \Drupal\node\Entity\NodeInterface */
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
      if (strtotime('+2 days', $node->field_last_notified->getValue()) < $node->field_expiration_date->getValue()) {
        $node_ids[] = $nid;
      }
    }
  }
  return $node_ids;
}

/**
 * Implements hook_mail().
 */
function nys_sunset_policy_mail($key, &$message, $params) {
  switch ($key) {
    case 'expired_mail':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $params['subject'];
      $body_data = [
        '#theme' => 'expired_mail',
        '#message' => $params['body'],
      ];
      $message['body'][] = \Drupal::service('renderer')->render($body_data);
      break;

    case 'expiring_mail':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $params['subject'];
      $body_data = [
        '#theme' => 'expiring_mail',
        '#message' => $params['message'],
      ];
      $message['body'][] = \Drupal::service('renderer')->render($body_data);
      break;
  }
}
