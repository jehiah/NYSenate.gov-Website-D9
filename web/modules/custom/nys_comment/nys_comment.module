<?php

/**
 * @file
 * Custom functionality for the nys_comment module.
 */

use Drupal\Core\Url;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_entity_type_alter().
 */
function nys_comment_entity_type_alter(array &$entity_types) {
  // Add validation constraint to the comment entity.
  $entity_types['comment']->addConstraint('userCommentBanned');
}

/**
 * Implements hook_form_alter().
 */
function nys_comment_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'user_form') {
    if (isset($form['field_user_banned_comments'])) {
      /** @var \Drupal\Core\Session\AccountProxyInterface */
      $current_user = \Drupal::service('current_user');
      if (!$current_user->hasPermission('administer users')) {
        $form['field_user_banned_comments']['#access'] = FALSE;
      }
    }
  }
}

/**
 * Implements hook_entity_operation().
 */
function nys_comment_entity_operation_alter(array &$operations, EntityInterface $entity) {
  $entityTypeId = $entity->getEntityTypeId();
  if ($entityTypeId !== 'comment') {
    return;
  }
  $commentType = $entity->bundle();
  $cid = $entity->id();
  if ($commentType === 'default_comment') {
    // @todo fix the operations button.
    // The override should only apply to unapproved
    // comments list.
    $operations = [];

    // Add approve operation.
    $approveCommentUrl = Url::fromRoute('comment.approve', ['comment' => $cid]);
    $operations['approve'] = [
      'title' => t('Approve'),
      'weight' => 20,
      'url' => $approveCommentUrl,
    ];

    // Ban user operation.
    $banUserUrl = Url::fromRoute('comment.ban_user', ['comment' => $cid]);
    $operations['ban'] = [
      'title' => t('Ban'),
      'weight' => 20,
      'url' => $banUserUrl,
    ];
  }
}

/**
 * Implements hook_preprocess_links__comment().
 */
function nys_comment_preprocess_links__comment(&$variables) {
  // Remove the approve button on the links.
  unset($variables['links']['comment-approve']);
}
